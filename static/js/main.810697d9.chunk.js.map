{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["isValidPostCode","postcode","RegExp","test","removeDuplicates","data","Array","from","Set","getPostCodeCount","count","index","length","getFormattedData","outwardPostcodes","arr","forEach","push","split","getOutwardPostCode","getOutwardPostCodes","dataWithNoDuplicates","returnedArray","percentage","toFixed","getPostCodePercentage","getHistogramData","map","getHistogramLabels","App","formattedData","error","isArray","some","obj","element","getPostCodeArray","list","labels","histogramData","top5Postcodes","sort","a","b","parseFloat","slice","getTop5Postcodes","top5Labels","top5HistogramData","options","fillColor","strokeColor","xLabels","yValues","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"i4rGAAO,SAASA,EAAgBC,GAI9B,OAHkB,IAAIC,OACpB,yGAEeC,KAAKF,GA4CjB,SAASG,EAAiBC,GAG/B,OADmBC,MAAMC,KAAK,IAAIC,IAAIH,IASjC,SAASI,EAAiBJ,EAAMJ,GAErC,IADA,IAAIS,EAAQ,EACHC,EAAQ,EAAGA,EAAQN,EAAKO,OAAQD,IACnCN,EAAKM,KAAWV,GAClBS,IAGJ,OAAOA,EAOF,SAASG,EAAiBR,GAE/B,IAAIS,EAtCC,SAA6BT,GAClC,IAAIU,EAAM,GAOV,OANAV,EAAKW,SAAQ,SAACf,GAERD,EAAgBC,IAClBc,EAAIE,KAnCH,SAA4BhB,GACjC,OAAOA,EAASiB,MAAM,KAAK,GAkCdC,CAAmBlB,OAGzBc,EA8BgBK,CAAoBf,GAGvCgB,EAAuBjB,EAAiBU,GAGxCQ,EAAgB,GAiBpB,OAdAD,EAAqBL,SAAQ,SAACf,GAE5B,IAAMS,EAAQD,EAAiBK,EAAkBb,GAG3CsB,EApBH,SAA+BlB,EAAMJ,GAC1C,OAASQ,EAAiBJ,EAAMJ,GAAYI,EAAKO,OAAU,KAAKY,QAAQ,GAmBnDC,CAAsBX,EAAkBb,GAG3DqB,EAAcL,KAAK,CACjBhB,WACAS,QACAa,kBAGGD,EAGF,SAASI,EAAiBrB,GAC/B,OAAOA,EAAKsB,KAAI,qBAAGjB,SAGd,SAASkB,EAAmBvB,GACjC,OAAOA,EAAKsB,KAAI,gBAAG1B,EAAH,EAAGA,SAAUsB,EAAb,EAAaA,WAAb,gBAAiCtB,EAAjC,aAA8CsB,EAA9C,SC5DHM,MAnCf,WAEE,IACMC,EAAgBjB,EDHjB,SAA0BR,GAC/B,IAAM0B,EAAQ,iCAGd,IAAKzB,MAAM0B,QAAQ3B,GACjB,OAAO0B,EAGT,GAAoB,IAAhB1B,EAAKO,OACP,OAAOmB,EAIT,IAAK1B,EAAK4B,MAAK,SAACC,GAAD,OAASA,EAAG,YACzB,OAAOH,EAGT,IAAIhB,EAAM,GAMV,OALAV,EAAKW,SAAQ,SAACmB,GACRnC,EAAgBmC,EAAQlC,WAC1Bc,EAAIE,KAAKkB,EAAQlC,aAGdc,ECrBMqB,CAAiB/B,EAAKA,KAAKgC,OAGlCC,EAASV,EAAmBE,GAC5BS,EAAgBb,EAAiBI,GAEjCU,ED0FD,SAA0BnC,GAC/B,OAAOA,EACJoC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,WAAWD,EAAEjC,OAASkC,WAAWF,EAAEhC,UAClDmC,MAAM,EAAG,GC7FUC,CAAiBhB,GACjCiB,EAAanB,EAAmBY,GAChCQ,EAAoBtB,EAAiBc,GAErCS,EAAU,CAAEC,UAAW,UAAWC,YAAa,WACrD,OACE,6BACE,qCACA,kBAAC,IAAD,CACEC,QAASL,EACTM,QAASL,EACTM,MAAM,OACNC,OAAO,MACPN,QAASA,IAEX,sCACA,kBAAC,IAAD,CACEG,QAASd,EACTe,QAASd,EACTe,MAAM,OACNC,OAAO,MACPN,QAASA,MC5BGO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.810697d9.chunk.js","sourcesContent":["export function isValidPostCode(postcode) {\n  const govRegExp = new RegExp(\n    \"^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$\"\n  );\n  return govRegExp.test(postcode);\n}\n\nexport function getOutwardPostCode(postcode) {\n  return postcode.split(\" \")[0];\n}\n\nexport function getPostCodeArray(data) {\n  const error = \"Sorry, that's an invalid array\";\n\n  // Is it an array?\n  if (!Array.isArray(data)) {\n    return error;\n  }\n  // Does it contain anything?\n  if (data.length === 0) {\n    return error;\n  }\n\n  // Does it contain our property (postcode)?\n  if (!data.some((obj) => obj[\"postcode\"])) {\n    return error;\n  }\n\n  let arr = [];\n  data.forEach((element) => {\n    if (isValidPostCode(element.postcode)) {\n      arr.push(element.postcode);\n    }\n  });\n  return arr;\n}\n\nexport function getOutwardPostCodes(data) {\n  let arr = [];\n  data.forEach((postcode) => {\n    // If the postcode isn't valid, dont include it\n    if (isValidPostCode(postcode)) {\n      arr.push(getOutwardPostCode(postcode));\n    }\n  });\n  return arr;\n}\n\nexport function removeDuplicates(data) {\n  // Needs tests to check for invalid arrays etc.\n  let unique_array = Array.from(new Set(data));\n  return unique_array;\n}\n\nexport function getTotalCount(data) {\n  // Kinda pointless this one...\n  return removeDuplicates(data).length;\n}\n\nexport function getPostCodeCount(data, postcode) {\n  let count = 0;\n  for (let index = 0; index < data.length; index++) {\n    if (data[index] === postcode) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function getPostCodePercentage(data, postcode) {\n  return ((getPostCodeCount(data, postcode) / data.length) * 100).toFixed(2);\n}\n\nexport function getFormattedData(data) {\n  // Get a list of just the outward postcodes\n  let outwardPostcodes = getOutwardPostCodes(data);\n\n  // Get a list of outward postcodes, with duplicates removed - to loop over\n  let dataWithNoDuplicates = removeDuplicates(outwardPostcodes);\n\n  // Set up an array to be returned\n  let returnedArray = [];\n\n  // For each of our outward postcodes ...\n  dataWithNoDuplicates.forEach((postcode) => {\n    // Get the postcode count\n    const count = getPostCodeCount(outwardPostcodes, postcode);\n\n    //Get the postcode percentage\n    const percentage = getPostCodePercentage(outwardPostcodes, postcode);\n\n    // return it\n    returnedArray.push({\n      postcode,\n      count,\n      percentage,\n    });\n  });\n  return returnedArray;\n}\n\nexport function getHistogramData(data) {\n  return data.map(({ count }) => count);\n}\n\nexport function getHistogramLabels(data) {\n  return data.map(({ postcode, percentage }) => `${postcode} (${percentage}%)`);\n}\n\nexport function getTop5Postcodes(data) {\n  return data\n    .sort((a, b) => parseFloat(b.count) - parseFloat(a.count))\n    .slice(0, 5);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Histogram from \"react-chart-histogram\";\nimport data from \"./data.json\";\nimport {\n  getPostCodeArray,\n  getFormattedData,\n  getHistogramLabels,\n  getHistogramData,\n  getTop5Postcodes,\n} from \"./helpers.js\";\nfunction App() {\n  // TODO : Abstract this into a single function call\n  const list = getPostCodeArray(data.data.list);\n  const formattedData = getFormattedData(list);\n\n  const labels = getHistogramLabels(formattedData);\n  const histogramData = getHistogramData(formattedData);\n\n  const top5Postcodes = getTop5Postcodes(formattedData);\n  const top5Labels = getHistogramLabels(top5Postcodes);\n  const top5HistogramData = getHistogramData(top5Postcodes);\n\n  const options = { fillColor: \"#0000FF\", strokeColor: \"#0000FF\" };\n  return (\n    <div>\n      <h1>Top 5</h1>\n      <Histogram\n        xLabels={top5Labels}\n        yValues={top5HistogramData}\n        width=\"1080\"\n        height=\"680\"\n        options={options}\n      />\n      <h1>Totals</h1>\n      <Histogram\n        xLabels={labels}\n        yValues={histogramData}\n        width=\"1080\"\n        height=\"680\"\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}